/** 
 * Default grid settings.  Column classes and
 * helper classes will be generated for each
 * breakpoint listed below.
 */
$grid-settings: (
  namespace: 'grid', // applied as a prefix for all generated classes
  width: 1200px, // 'Max width' of the layout
  columns: 12, // number of columns
  gutter: 20px, // gutter (Will be divided by 2 on each side.)
  breakpoints: ( // number of breakpoints is dynamic, use whatever prefixes you want
    ('xs', 0px), // Always start with 0.
    ('sm', 375px),
    ('md', 768px),
    ('lg', 1200px)
  )
) !default;


/**
 * Generates base classes and standardizes box sizing. 
 */
@mixin grid-base() {
  $NS: map-get($grid-settings, namespace);

  html {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }

  *, *:before, *:after {
    -webkit-box-sizing: inherit;
    -moz-box-sizing: inherit;
    box-sizing: inherit;
  }

  /**
  * Containers contain (hah!) rows and
  * columns.
  */
  .#{$NS}-container {
    display: block;
    clear: both;
    width: 100%;
    max-width: map-get($grid-settings, width);
    margin-left:auto;
    margin-right:auto;
  }

  /** 
  * Fluid containers have no max-width and will scale to fit
  * their parent element.
  */
  .#{$NS}-container-fluid {
    @extend .#{$NS}-container;
    max-width: none;
    margin-left: 0;
    margin-right: 0;
  }

  /**
  * Rows provide a mechanism for stacking sets of columns,
  * preventing one section of the layout from stacking
  * into another.
  */
  .#{$NS}-row {
    display: block;
    width: 100%;
    clear: both;
    padding-left: map-get($grid-settings, gutter) / 2;
    padding-right: map-get($grid-settings, gutter) / 2;
    // Prevents a stacking issue with empty columns in 
    // some browsers.
    &:before, &:after {
      display: table;
      content: ' ';
      clear: both;
    }
  }
}


/** 
* Creates a column class and its corresponding helper classes.
* (Using separate else if cases generates classes that minify
* more easily.)
*/
@mixin grid-column ($prefix, $i:0, $total:0, $mode:'create') {
  $NS: map-get($grid-settings, namespace);

  @if $mode == 'create' {
    .#{$NS}-#{$prefix}-#{$i} {
      display: block;
      position: relative;
      margin: 0px;
      padding-left: map-get($grid-settings, gutter) / 2;
      padding-right: map-get($grid-settings, gutter) / 2;
      width: percentage((1 / $total) * $i);
      float: left;
      min-height: 1px; //prevents columns from collapsing when empty
    }
  } @else if $mode == 'hide' { // hides column at breakpoint
    .#{$NS}-#{$prefix}-hide {
      display: none;
    }
  } @else if $mode == 'show' { // shows column at breakpoint
    .#{$NS}-#{$prefix}-show {
      display: block;
    }
  } @else if $mode == 'flush' { // removes gutter starting at breakpoint
    .#{$NS}-#{$prefix}-flush {
      padding-left: 0;
      padding-right: 0;
    }
  } @else if $mode == 'gutter' { // adds gutter starting at breakpoint
    .#{$NS}-#{$prefix}-gutter {
      padding-left: map-get($grid-settings, gutter) / 2;
      padding-right: map-get($grid-settings, gutter) / 2;
    }
  } @else if $mode == 'pull' { // slides column to left
    .#{$NS}-#{$prefix}-pull-#{$i} {
      right: percentage((1 / $total) * $i);
    }
  } @else if $mode == 'push' { // slides column to right
    .#{$NS}-#{$prefix}-push-#{$i} {
      left: percentage((1 / $total) * $i);
    }
  } @else if $mode == 'shift' { // shifts column to right (will affect stacking)
    .#{$NS}-#{$prefix}-shift-#{$i} {
      margin-left: percentage((1 / $total) * $i);
    }
  } @else if $mode == 'text-left' { // text-align: left for this breakpoint
    .#{$NS}-#{$prefix}-text-left {
    text-align: left;
    }
  } @else if $mode == 'text-right' { // text-align: right for this breakpoint
    .#{$NS}-#{$prefix}-text-right {
    text-align: right;
    }
  } @else if $mode == 'text-center' { // text-align: center for this breakpoint
    .#{$NS}-#{$prefix}-text-center {
    text-align: center;
    }
  }
}


/** 
*  Uses $grid-settings to generate the column classes 
*  and helpers for each breakpoint.
*/
@mixin grid-generate () {
  @include grid-base();

  @each $prefix, $val in map-get($grid-settings, breakpoints) {
    @media (min-width: $val) {
      @for $i from 1 through map-get($grid-settings, columns) {
        @include grid-column($prefix, $i, map-get($grid-settings, columns));
      }
      @for $i from 1 through map-get($grid-settings, columns) {
        @include grid-column($prefix, $i, map-get($grid-settings, columns), 'pull');
      }
      @for $i from 1 through map-get($grid-settings, columns) {
        @include grid-column($prefix, $i, map-get($grid-settings, columns), 'push');
      }
      @for $i from 1 through map-get($grid-settings, columns) {
        @include grid-column($prefix, $i, map-get($grid-settings, columns), 'shift');
      }
      
      // Only generates one class per breakpoint
      @include grid-column($prefix, null, null, 'hide');
      @include grid-column($prefix, null, null, 'show');
      @include grid-column($prefix, null, null, 'flush');
      @include grid-column($prefix, null, null, 'gutter');
      @include grid-column($prefix, null, null, 'text-left');
      @include grid-column($prefix, null, null, 'text-right');
      @include grid-column($prefix, null, null, 'text-center');
    }
  }
}